{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RC-PCR CLASSIFIER \u00b6 Version: V0.2 (BETA) \u00b6 install \u00b6 obtain docker image docker pull jonovox/nextflowcentos:latest download this project extract this project navigate to project Download prebuild conda.tar.gz https://surfdrive.surf.nl/files/index.php/s/5q2feFVult4v81k Extract conda.tar.gz in folder single sample docker \u00b6 sh docker/run.sh RC jonovox/nextflowcentos:latest batch run docker \u00b6 # USAGE cd project # USAGE # bash run_batch_docker.sh <inputpath> <file_extension> <database> <threads> <image> <outputname> # bash run_batch_docker.sh ${1} ${2} ${3} ${4} ${5} ${6} # Example: bash run_batch_docker.sh /workflow/input/ _001.fastq.gz SILVA 8 jonovox/easyseq_covid19:latest SILVA_test # <file_extension> most common _001.fastq.gz FLOW-DIAGRAM \u00b6 conda environments \u00b6 1A_clean_reads (fastp, version 0.20.1)\\ env-f07c78eef9e8319c7eb087d931e36003 2A_measure_amplicons\\ env-cd4ea0676bf53b5d7e5c6c6c523f0013 3A_KMA (version 1.3.28)\\ env-84e06c5335c0a958ed012db619fdfceb 3B_process_KMA\\ env-4ca5b26b8a059c60e73996439311c22f 4A_abricate\\ env-b415f051979c22cdef40a3cbee1f0aa3 5A_annotation\\ env-9f6b61e20675ae28786fdb538092d4db 6_multiQC (version 1.12)\\ env-3abca7a24ea4d6c708bf4c6cea6413d2 output \u00b6 SHANKEY PLOT \u00b6 . \u251c\u2500\u2500 QC \u2502 \u2514\u2500\u2500 multiqc_report.html \u251c\u2500\u2500 abricate \u2502 \u2514\u2500\u2500 test_blast.txt #abricate/blast result \u251c\u2500\u2500 annotation \u2502 \u2514\u2500\u2500 test.final.vcf #annotated vcf file \u251c\u2500\u2500 fastp \u2502 \u2514\u2500\u2500 test.fastp.json \u251c\u2500\u2500 kma \u2502 \u251c\u2500\u2500 test.aln \u2502 \u251c\u2500\u2500 test.frag.gz \u2502 \u251c\u2500\u2500 test.frag_raw.gz \u2502 \u251c\u2500\u2500 test.fsa \u2502 \u251c\u2500\u2500 test.mapstat \u2502 \u251c\u2500\u2500 test.res #KMA result file \u2502 \u251c\u2500\u2500 test.sam \u2502 \u251c\u2500\u2500 test.sorted.bam #bam for genomebrowser \u2502 \u251c\u2500\u2500 test.sorted.bam.bai \u2502 \u2514\u2500\u2500 test.vcf.gz \u2514\u2500\u2500 test_UMI_counttable.xlsx #primer count table database structure \u00b6 db \u251c\u2500\u2500 databasename \u2502 \u251c\u2500\u2500 KMA \u2502 \u2502 \u251c\u2500\u2500 databasename.comp.b \u2502 \u2502 \u251c\u2500\u2500 databasename.length.b \u2502 \u2502 \u251c\u2500\u2500 databasename.name \u2502 \u2502 \u2514\u2500\u2500 databasename.seq.b \u2502 \u251c\u2500\u2500 blast \u2502 \u2502 \u251c\u2500\u2500 sequences.fasta \u2502 \u2502 \u251c\u2500\u2500 sequences.fasta.fai \u2502 \u2502 \u251c\u2500\u2500 sequences.nhr \u2502 \u2502 \u251c\u2500\u2500 sequences.nin \u2502 \u2502 \u2514\u2500\u2500 sequences.nsq \u2502 \u2514\u2500\u2500 primers \u2502 \u2514\u2500\u2500 databasename_primers.fasta Extra \u00b6 blastdb \u00b6 18S makeblastdb -in /workflow/db/blast_db/18S/sequences.fasta -title 18S -dbtype nucl -out /workflow/db/blast_db/18S/sequences CYP51A (Afu4g06890) makeblastdb -in /workflow/db/blast_db/CYP51A/sequences.fasta -title CYP51A -dbtype nucl -out /workflow/db/blast_db/CYP51A/sequences CYP51A \u00b6 18S kma_index -i /workflow/db/KMA/18S.fa -o /workflow/db/KMA/18S CYP51A (Afu4g06890) kma_index -i /workflow/db/KMA/CYP51A.fa -o /workflow/db/KMA/CYP51A snpEff \u00b6 manual CYP51A (Afu4g06890) snpEff build -gff3 CYP51A SILVA database \u00b6 SILVA_138.1_SSURef_NR99_tax_silva_trunc convert rRNA to DNA perl -pe 'tr/tU/uT/ unless(/>/)' < db/SILVA_138.1_SSURef_NR99_tax_silva_trunc.fasta > SILVA_138.1_SSURef_NR99_tax_silva_trunc_DNA.fasta NOTES \u00b6 splitting of samples on UMI using seqkit seqkit grep -irp UMI samplename.fastq.gz > output.fastq","title":"Home"},{"location":"#rc-pcr-classifier","text":"","title":"RC-PCR CLASSIFIER"},{"location":"#version-v02-beta","text":"","title":"Version: V0.2 (BETA)"},{"location":"#install","text":"obtain docker image docker pull jonovox/nextflowcentos:latest download this project extract this project navigate to project Download prebuild conda.tar.gz https://surfdrive.surf.nl/files/index.php/s/5q2feFVult4v81k Extract conda.tar.gz in folder","title":"install"},{"location":"#single-sample-docker","text":"sh docker/run.sh RC jonovox/nextflowcentos:latest","title":"single sample docker"},{"location":"#batch-run-docker","text":"# USAGE cd project # USAGE # bash run_batch_docker.sh <inputpath> <file_extension> <database> <threads> <image> <outputname> # bash run_batch_docker.sh ${1} ${2} ${3} ${4} ${5} ${6} # Example: bash run_batch_docker.sh /workflow/input/ _001.fastq.gz SILVA 8 jonovox/easyseq_covid19:latest SILVA_test # <file_extension> most common _001.fastq.gz","title":"batch run docker"},{"location":"#flow-diagram","text":"","title":"FLOW-DIAGRAM"},{"location":"#conda-environments","text":"1A_clean_reads (fastp, version 0.20.1)\\ env-f07c78eef9e8319c7eb087d931e36003 2A_measure_amplicons\\ env-cd4ea0676bf53b5d7e5c6c6c523f0013 3A_KMA (version 1.3.28)\\ env-84e06c5335c0a958ed012db619fdfceb 3B_process_KMA\\ env-4ca5b26b8a059c60e73996439311c22f 4A_abricate\\ env-b415f051979c22cdef40a3cbee1f0aa3 5A_annotation\\ env-9f6b61e20675ae28786fdb538092d4db 6_multiQC (version 1.12)\\ env-3abca7a24ea4d6c708bf4c6cea6413d2","title":"conda environments"},{"location":"#output","text":"","title":"output"},{"location":"#shankey-plot","text":". \u251c\u2500\u2500 QC \u2502 \u2514\u2500\u2500 multiqc_report.html \u251c\u2500\u2500 abricate \u2502 \u2514\u2500\u2500 test_blast.txt #abricate/blast result \u251c\u2500\u2500 annotation \u2502 \u2514\u2500\u2500 test.final.vcf #annotated vcf file \u251c\u2500\u2500 fastp \u2502 \u2514\u2500\u2500 test.fastp.json \u251c\u2500\u2500 kma \u2502 \u251c\u2500\u2500 test.aln \u2502 \u251c\u2500\u2500 test.frag.gz \u2502 \u251c\u2500\u2500 test.frag_raw.gz \u2502 \u251c\u2500\u2500 test.fsa \u2502 \u251c\u2500\u2500 test.mapstat \u2502 \u251c\u2500\u2500 test.res #KMA result file \u2502 \u251c\u2500\u2500 test.sam \u2502 \u251c\u2500\u2500 test.sorted.bam #bam for genomebrowser \u2502 \u251c\u2500\u2500 test.sorted.bam.bai \u2502 \u2514\u2500\u2500 test.vcf.gz \u2514\u2500\u2500 test_UMI_counttable.xlsx #primer count table","title":"SHANKEY PLOT"},{"location":"#database-structure","text":"db \u251c\u2500\u2500 databasename \u2502 \u251c\u2500\u2500 KMA \u2502 \u2502 \u251c\u2500\u2500 databasename.comp.b \u2502 \u2502 \u251c\u2500\u2500 databasename.length.b \u2502 \u2502 \u251c\u2500\u2500 databasename.name \u2502 \u2502 \u2514\u2500\u2500 databasename.seq.b \u2502 \u251c\u2500\u2500 blast \u2502 \u2502 \u251c\u2500\u2500 sequences.fasta \u2502 \u2502 \u251c\u2500\u2500 sequences.fasta.fai \u2502 \u2502 \u251c\u2500\u2500 sequences.nhr \u2502 \u2502 \u251c\u2500\u2500 sequences.nin \u2502 \u2502 \u2514\u2500\u2500 sequences.nsq \u2502 \u2514\u2500\u2500 primers \u2502 \u2514\u2500\u2500 databasename_primers.fasta","title":"database structure"},{"location":"#extra","text":"","title":"Extra"},{"location":"#blastdb","text":"18S makeblastdb -in /workflow/db/blast_db/18S/sequences.fasta -title 18S -dbtype nucl -out /workflow/db/blast_db/18S/sequences CYP51A (Afu4g06890) makeblastdb -in /workflow/db/blast_db/CYP51A/sequences.fasta -title CYP51A -dbtype nucl -out /workflow/db/blast_db/CYP51A/sequences","title":"blastdb"},{"location":"#cyp51a","text":"18S kma_index -i /workflow/db/KMA/18S.fa -o /workflow/db/KMA/18S CYP51A (Afu4g06890) kma_index -i /workflow/db/KMA/CYP51A.fa -o /workflow/db/KMA/CYP51A","title":"CYP51A"},{"location":"#snpeff","text":"manual CYP51A (Afu4g06890) snpEff build -gff3 CYP51A","title":"snpEff"},{"location":"#silva-database","text":"SILVA_138.1_SSURef_NR99_tax_silva_trunc convert rRNA to DNA perl -pe 'tr/tU/uT/ unless(/>/)' < db/SILVA_138.1_SSURef_NR99_tax_silva_trunc.fasta > SILVA_138.1_SSURef_NR99_tax_silva_trunc_DNA.fasta","title":"SILVA database"},{"location":"#notes","text":"splitting of samples on UMI using seqkit seqkit grep -irp UMI samplename.fastq.gz > output.fastq","title":"NOTES"}]}